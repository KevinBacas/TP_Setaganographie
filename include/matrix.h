/**************************************************************************/
/**************************************************************************/
/* Name ........ : matrix.h                                               */
/* Role ........ : Mini library to manipulate binary matrices.            */
/*                                                                        */
/* Author ...... : Morgan Barbier <morgan.barbier@ensicaen.fr>            */
/* Version ..... : V1.0 2013-01-20                                        */
/* Licence ..... : CC                                                     */
/**************************************************************************/
/**************************************************************************/
#ifndef __MATRIX_H__
#define __MATRIX_H__

#include <stdio.h>
#include <stdlib.h>
#include "error.h"
#include "vector.h"

typedef struct MATRIX
{
  uint** data;
  uint nb_row;
  uint nb_col;
} matrix;


/**************************************************************************/
/**************************************************************************/
/* Function which allocates the matrix 'r' with 'nbr' rows and 'nbc'      */
/* columns. The obtained matrix is not initializes.                       */
/**************************************************************************/
/**************************************************************************/
void matrix_malloc(matrix **r, const uint nbr, const uint nbc);

/**************************************************************************/
/**************************************************************************/
/* Function which allocates the matrix 'r' with 'nbr' rows and 'nbc'      */
/* columns. The obtained matrix is the zero matrix.                       */
/**************************************************************************/
/**************************************************************************/
void matrix_calloc(matrix **r, const uint nbr, const uint nbc);

/**************************************************************************/
/**************************************************************************/
/* Function which frees properly the matrix 'm'.                          */
/**************************************************************************/
/**************************************************************************/
void matrix_free(matrix** m);

/**************************************************************************/
/**************************************************************************/
/* Function which prints the matrix 'm' into the stream 'out'.            */
/**************************************************************************/
/**************************************************************************/
void matrix_fprint(FILE *out, const matrix* m);

/**************************************************************************/
/**************************************************************************/
/* Function which prints the matrix 'm' into the stream stdout.           */
/**************************************************************************/
/**************************************************************************/
void matrix_print(const matrix* m);

/**************************************************************************/
/**************************************************************************/
/* Function which sets 'r' as the multiplication of 'm1' x 'm2'.          */
/**************************************************************************/
/**************************************************************************/
void matrix_mult(matrix *r, const matrix *m1, const matrix *m2);

/**************************************************************************/
/**************************************************************************/
/* Function which sets 'r' as the transpose of 'm'.                       */
/**************************************************************************/
/**************************************************************************/
void matrix_transpose(matrix *r, const matrix *m);

/**************************************************************************/
/**************************************************************************/
/* Function which sets the 'row_i'-th row of the matrix 'r' with 'row'    */
/* of size 'size_row'.                                                    */
/**************************************************************************/
/**************************************************************************/
void matrix_set_row(matrix *r, const uint* row, const uint size_row, const uint row_i);

/**************************************************************************/
/**************************************************************************/
/* Function which sets 'r' as the multiplication 'v' x 'm'.               */
/**************************************************************************/
/**************************************************************************/
void matrix_vector_mult(vector* r, const vector* v, const matrix* m);

#endif /* __MATRIX_H__ */
