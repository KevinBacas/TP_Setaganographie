/**************************************************************************/
/**************************************************************************/
/* Name ........ : vector.h                                               */
/* Role ........ : Mini library to manipulate binary vectors.             */
/*                                                                        */
/* Author ...... : Morgan Barbier <morgan.barbier@ensicaen.fr>            */
/* Version ..... : V1.0 2013-01-20                                        */
/* Licence ..... : CC                                                     */
/**************************************************************************/
/**************************************************************************/
#ifndef __VECTOR_H__
#define __VECTOR_H__

#include <stdio.h>
#include <stdlib.h>
#include "error.h"

typedef unsigned int uint;

typedef struct VECTOR
{
  uint *v;
  uint size;
} vector;



/**************************************************************************/
/**************************************************************************/
/* Functions which allocates the vector 'r' of size 'size'. This vector   */
/* is not initialize.                                                     */
/**************************************************************************/
/**************************************************************************/
void vector_malloc(vector** r, const uint size);

/**************************************************************************/
/**************************************************************************/
/* Functions which allocates the vector 'r' of size 'size'. This vector   */
/* is the zero vector.                                                    */
/**************************************************************************/
/**************************************************************************/
void vector_calloc(vector** r, const uint size);

/**************************************************************************/
/**************************************************************************/
/* Functions which frees properly 'r'.                                    */
/**************************************************************************/
/**************************************************************************/
void vector_free(vector **r);

/**************************************************************************/
/**************************************************************************/
/* Functions which prints 'v' into the stream 'out'.                      */
/**************************************************************************/
/**************************************************************************/
void vector_fprint(FILE* out, const vector* v);

/**************************************************************************/
/**************************************************************************/
/* Functions which prints 'v' into the stream stdout.                     */
/**************************************************************************/
/**************************************************************************/
void vector_print(const vector* v);

/**************************************************************************/
/**************************************************************************/
/* Functions which set 'r' as the size of 'v'.                            */
/**************************************************************************/
/**************************************************************************/
void vector_get_size(uint* r, const vector* v);

/**************************************************************************/
/**************************************************************************/
/* Functions which set 'r' as the 'i'-th element of 'v'.                  */
/**************************************************************************/
/**************************************************************************/
void vector_get_element(uint* r, const vector* v, const uint i);

/**************************************************************************/
/**************************************************************************/
/* Functions which sets the 'i'-th element of 'v' with 'e'.               */
/**************************************************************************/
/**************************************************************************/
void vector_set_element(vector* v, const uint e, const uint i);

/**************************************************************************/
/**************************************************************************/
/* Functions which sets 'r' as the XOR of 'v1' by 'v2'.                   */
/**************************************************************************/
/**************************************************************************/
void vector_xor(vector* r, const vector* v1, const vector* v2);

/**************************************************************************/
/**************************************************************************/
/* Functions which sets 'r' as the positive number which has 'v' as       */
/* binary representation. The Least Significant Bit is v[0].              */
/**************************************************************************/
/**************************************************************************/
void vector_binary_to_dec(uint *r, const vector *v);

/**************************************************************************/
/**************************************************************************/
/* Functions which sets 'r' as the binary representation of 'v'. The LSB  */
/* of 'v' is v[0].                                                        */
/**************************************************************************/
/**************************************************************************/
void vector_dec_to_bin(vector *r, const int v);

/**************************************************************************/
/**************************************************************************/
/* Functions which returns 0 if a == b and 1 otherwise.                   */
/**************************************************************************/
/**************************************************************************/
uint vector_are_equal(const vector* a, const vector* b);

/**************************************************************************/
/**************************************************************************/
/* Functions which returns 0 if 'v' is the null vector.                   */
/**************************************************************************/
/**************************************************************************/
uint vector_is_zero(const vector *v);

/**************************************************************************/
/**************************************************************************/
/* Functions which returns 0 if v == tab.                                 */
/**************************************************************************/
/**************************************************************************/
uint vector_is_equal_tab(const vector* v, const uint* tab);

/**************************************************************************/
/**************************************************************************/
/* Functions which sets 'r' as the subvector of 'v' from 'index. That is  */
/* r[0] = v[index], etc up to the size of 'r'.                            */
/**************************************************************************/
/**************************************************************************/
void vector_subvector(vector* r, const vector* v, const uint index);

/**************************************************************************/
/**************************************************************************/
/* Functions which sets 'r' as the subvector table of size 'size' of 'v'. */
/* That is:                                                               */
/* r[0] is the first subvector of 'v' of size 'size',                     */
/* r[1] is the second subvector of 'v' of size 'size',                    */
/* etc...                                                                 */
/* the first element of r[1] is the 'size'-th of 'v'.                     */
/**************************************************************************/
/**************************************************************************/
void vector_subvectors(vector** r, const vector* v, const uint size);

#endif /*  __VECTOR_H__ */
